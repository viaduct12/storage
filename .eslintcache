[{"C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\reportWebVitals.js":"1","C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\index.js":"2","C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\App.js":"3","C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\components\\Button\\index.js":"4","C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\utils\\API.js":"5","C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\components\\Table\\index.js":"6","C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\components\\TableData\\index.js":"7","C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\page\\Search\\index.js":"8"},{"size":362,"mtime":1606156216868,"results":"9","hashOfConfig":"10"},{"size":527,"mtime":1607063534544,"results":"11","hashOfConfig":"10"},{"size":124,"mtime":1607063445907,"results":"12","hashOfConfig":"10"},{"size":234,"mtime":1606776637771,"results":"13","hashOfConfig":"10"},{"size":4910,"mtime":1607120812206,"results":"14","hashOfConfig":"10"},{"size":743,"mtime":1606892847188,"results":"15","hashOfConfig":"10"},{"size":300,"mtime":1607063225141,"results":"16","hashOfConfig":"10"},{"size":5850,"mtime":1607063107167,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bffh34",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},"C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\reportWebVitals.js",[],"C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\index.js",[],["36","37"],"C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\App.js",[],"C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\components\\Button\\index.js",[],"C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\utils\\API.js",["38","39"],"C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\components\\Table\\index.js",[],"C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\components\\TableData\\index.js",[],"C:\\Users\\lawry\\Desktop\\student_help\\storage\\src\\page\\Search\\index.js",["40"],"import React from \"react\";\nimport './style.css';\nimport Button from '../../components/Button'\nimport Table from '../../components/Table'\nimport API from '../../utils/API';\n\nclass SignUp extends React.Component {\n\n    state = {\n        firstName: \"\",\n        lastName: \"\",\n        headers: ['fullName', 'firstName', 'lastName'],\n        tableData: [],\n        notFound: 'false',\n        text: '',\n        dataLoaded: 'false'\n    };\n\n    handleChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        this.setState({\n            'notFound': 'false',\n            'lastName': '',\n            'firstName': ''\n        });\n\n        if (this.state.dataLoaded === 'true') {\n            if (this.state.firstName === '' && this.state.lastName === '') {\n                this.setState({\n                    'notFound': 'true',\n                    'text': 'Please enter first name, last name, or both!'\n                });\n            } else {\n\n                let apiData = await API.getData(this.state.firstName, this.state.lastName);\n                if (apiData.length !== 0) {\n                    this.setState({\n                        'headers': ['fullName', 'firstName', 'lastName']\n                    })\n                    apiData.map(allData =>\n                        Object.keys(allData).map(keys => (!this.state.headers.includes(keys)) ? this.state.headers.push(keys) : '')\n                    )\n                }\n                apiData.length === 0 ? this.setState({\n                    'notFound': 'true',\n                    'text': 'Could not be found, Try again!'\n                }) : this.setState({\n                    'notFound': 'false',\n                    'tableData': apiData\n                });\n            }\n        } else {\n            this.setState({\n                'text': 'Load data first!'\n            })\n        }\n    }\n\n    handleClick = (event) => {\n        this.setState({ 'notFound': 'false' });\n        const { value } = event.target;\n        value === 'Load' ? API.loadData().then(async res => {\n            await this.preparePayload(res.data.split('\\r\\n'))\n            this.setState({\n                'dataLoaded': 'true',\n                'firstName': '',\n                'lastName': ''\n            })\n            let apiAllData = await API.getAllData();\n\n            apiAllData.map(allData =>\n                Object.keys(allData).map(keys => (!this.state.headers.includes(keys)) ? this.state.headers.push(keys) : '')\n            )\n            this.setState({ 'tableData': apiAllData })\n        }) : API.clearData();\n\n        if (value === 'Clear')\n            this.setState({\n                'tableData': [],\n                'dataLoaded': 'false'\n            })\n    }\n\n    preparePayload = async datas => {\n        API.checkFiles();\n        datas.map(data => {\n\n            let payload = {\n                fullName: \"\",\n                firstName: \"\",\n                lastName: \"\"\n            }\n\n            if (data !== \"\") {\n                data = data.replace(/\\t/g, ' ').trim();\n                let newArr = data.split(' ');\n                let firstName = newArr.shift();\n                let lastName = newArr[0] !== \"\" ? newArr.shift() : newArr.shift()\n\n                lastName = lastName === '' ? newArr.shift() : lastName\n                payload.fullName = `${firstName} ${lastName}`\n                payload.firstName = firstName\n                payload.lastName = lastName\n\n                for (let i = 0; i < newArr.length; i++) {\n                    if (newArr[i] !== \"\") {\n                        let tempArr = newArr[i].split('=');\n                        payload[tempArr[0]] = tempArr[1];\n                        let boolArr = this.state.headers.includes(tempArr[0]);\n                        if (!boolArr) {\n                            this.state.headers.push(tempArr[0]);\n                        }\n                    }\n                }\n                API.putData(payload)\n            }\n        })\n    }\n    render() {\n        return (\n            <>\n                <div className='container'>\n                    <div className='row'>\n                        <div id=\"loginBackground\">\n                            <div className=\"col m4 push-m4 front\" id=\"containerLogin\">\n                                {\n                                    this.state.notFound === 'true' || this.state.dataLoaded === 'false' ? <p>{this.state.text}</p> : <h1>Search!</h1>\n                                }\n                                <form onSubmit={this.handleSubmit}>\n                                    <input id=\"input\" type=\"text\" name=\"firstName\" value={this.state.firstName} onChange={this.handleChange} placeholder=\"first name\" /><br />\n                                    <input id=\"input\" type=\"text\" name=\"lastName\" value={this.state.lastName} onChange={this.handleChange} placeholder=\"last name\" /><br />\n                                    <button className=\"astext\" type=\"submit\">Query</button>\n                                </form>\n                                <Button className='query' name=\"Load\" onClick={this.handleClick} />\n                                <Button className='query' name=\"Clear\" onClick={this.handleClick} />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className='row astext'>\n                        {\n                            this.state.tableData.length === 0 ? <div className='load'>Load data first...</div> : <div className='tableContainer'><Table headers={this.state.headers} tabData={this.state.tableData} /></div>\n                        }\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default SignUp;",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":16,"column":1,"nodeType":"47","endLine":174,"endColumn":3},{"ruleId":"48","severity":1,"message":"49","line":46,"column":29,"nodeType":"50","messageId":"51","endLine":46,"endColumn":31},{"ruleId":"48","severity":1,"message":"49","line":91,"column":24,"nodeType":"50","messageId":"51","endLine":91,"endColumn":26},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]